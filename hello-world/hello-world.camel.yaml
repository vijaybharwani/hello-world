- restConfiguration: {}
- rest:
    id: accounts-api
    description: Accounts API
    path: /dci/customers
    post:
      - id: post-b78d
        path: /create/loan
        to: direct:create-loan
- route:
    id: route-3000
    description: DCI Loan Create
    nodePrefixId: route-c21
    from:
      id: from-ca4b
      description: DCI Loan Create
      uri: direct
      parameters:
        name: create-loan
      steps:
        - to:
            id: to-d626
            uri: direct
            parameters:
              name: salesAccountLoanCreate
        - removeHeaders:
            id: removeHeaders-d3ea
            pattern: '*'
        - setHeader:
            id: setHeader-a9d9
            name: Content-Type
            expression:
              constant:
                id: constant-037e
                expression: application/json
        - setHeader:
            id: setHeader-ffe3
            description: X-DCI-DciApi-Key
            name: X-DCI-DciApi-Key
            expression:
              simple:
                id: simple-c398
                expression: '{{dciApiKey}}'
        - setHeader:
            id: setHeader-2bfb
            description: Method
            name: CamelHttpMethod
            expression:
              constant:
                id: constant-b246
                expression: POST
        - toD:
            id: toD-6c31
            uri: >-
              https://api.datacenterinc.com/4110WFLLMPGL/DciApi/SBX08/Loan/Create
- route:
    id: route-07e8
    description: SF ACCESS TOKEN
    nodePrefixId: route-77d
    from:
      id: from-e3b7
      description: SF Generate Token
      uri: direct
      parameters:
        name: create-token
      steps:
        - removeHeaders:
            id: removeHeaders-ef29
            pattern: '*'
        - setHeader:
            id: setHeader-f340
            description: Content-Type
            name: Content-Type
            expression:
              constant:
                id: constant-9863
                expression: application/x-www-form-urlencoded
        - setBody:
            id: setBody-da98
            expression:
              csimple:
                id: csimple-1954
                expression: >-
                  grant_type=password&client_id={{clientId}}&client_secret={{clientSecret}}&username={{username}}&password=A5a%25Y9|):llD?WXZ
                resultType: java.lang.String
        - setHeader:
            id: setHeader-da78
            description: CamelHttpMethod
            name: CamelHttpMethod
            expression:
              constant:
                id: constant-a26f
                expression: POST
        - to:
            id: to-4d2c
            uri: https
            parameters:
              httpUri: test.salesforce.com/services/oauth2/token
              throwExceptionOnFailure: false
              authenticationPreemptive: false
        - log:
            id: log-1e9c
            message: ${body}
        - setProperty:
            id: setProperty-2595
            name: accessToken
            expression:
              datasonnet:
                id: datasonnet-0d22
                expression: payload['access_token']
                bodyMediaType: application/json
                outputMediaType: application/java
                resultType: java.lang.String
- route:
    id: route-b79d
    description: SF SalesAccountLoanCreate
    nodePrefixId: route-3e7
    from:
      id: from-cf47
      uri: direct
      parameters:
        name: salesAccountLoanCreate
      steps:
        - to:
            id: to-4ef1
            uri: direct
            parameters:
              name: create-token
        - removeHeaders:
            id: removeHeaders-d6fc
            pattern: '*'
        - setHeader:
            id: setHeader-9ceb
            name: CamelHttpMethod
            expression:
              constant:
                id: constant-b805
                expression: GET
        - setHeader:
            id: setHeader-ff28
            description: Authorization
            name: Authorization
            expression:
              simple:
                id: simple-c9c9
                expression: Bearer ${exchangeProperty.accessToken}
        - setProperty:
            id: setProperty-ccb6
            description: Query
            name: query
            expression:
              simple:
                id: simple-1eb0
                expression: >-
                  query?q=SELECT FIELDS(ALL), (SELECT Fields(ALL) FROM
                  Parties__r where Is_Primary_Borrower__c = 'Yes' LIMIT 200),
                  (SELECT Fields(ALL) FROM Facilities__r WHERE Stage__c =
                  'Disbursement'  LIMIT 200) , (SELECT Fields(ALL) FROM
                  Facility_Parties__r WHERE RecordType.Name IN ('Guarantor')
                  LIMIT 200) , (SELECT Project_Cost__c, Amount__c FROM
                  Sources_Uses__r  WHERE Project_Cost__c LIKE '%25Fee%25') ,
                  (SELECT  Policy_Type__c,Policy_Amount__c,Expiration_Date__c
                  FROM Insurances__r),(SELECT Fields(ALL) FROM Collaterals__r
                  LIMIT 200) FROM Opportunity WHERE ID='006Em00000BTfavIAD'
        - toD:
            id: toD-f6c9
            description: Fetch From Salesforce
            uri: >-
              https://celticbank--staging.sandbox.my.salesforce.com/services/data/v57.0/${exchangeProperty.query}
        - log:
            id: log-bbb4
            message: ${body}
        - transform:
            id: transform-23a2
            description: New Loan mapping processor
            expression:
              datasonnet:
                id: datasonnet-3ed5
                expression: >-
                  local record = payload.records[0];

                  local partyRecord = record['Parties__r'].records[0];

                  local facilityRecord = record['Facilities__r'].records[0];

                  local parseToZonedDateTime(input, formatter) =
                  ds.zoneddatetime.parse(input, formatter);

                  local toLocalDate(zonnedDateTime) =
                  ds.zoneddatetime.toLocalDate(zonnedDateTime);

                  local plus(date, interval) = ds.zoneddatetime.plus(date,
                  interval);

                  local contains(pattern, input) =
                  std.length(std.findSubstr(pattern, input)) > 0;

                  {
                      "userId" : "cas251",
                      customerRelationships : {
                          ownerShipCode : if(partyRecord['Party_Role__c'] == 'Borrower') then "01" else if (partyRecord['Is_Guarantor__c']) then "GT" else "",
                          custNum : partyRecord['iCore_Customer_Number__c'],
                          beneficialOwnerPercent : partyRecord['Ownership_Percentage__c']
                      },
                      addressNameLine2 : partyRecord['Address_Line_2__c'],
                      accountAddress : {
                          isForeignAddress : "No",
                          foreignCountry : "",
                          street : partyRecord['Address_Line_1__c'],
                          city : partyRecord['City__c'],
                          state :partyRecord['State__c'],
                          zip5 : partyRecord['Zipcode__c'],
                          zip4 : partyRecord['Physical_4_Digit_Zip_Code__c'],
                      },
                      loan : {
                          acctNum : facilityRecord['Loan_Number__c'],
                          productType: facilityRecord['Loan_Amount__c'],
                          branch : 0,
                          custNum: partyRecord['iCore_Customer_Number__c'],
                          openDate : facilityRecord['Closed_Date__c'],
                          // pending
                          maturityDate : 
                          toLocalDate(plus(parseToZonedDateTime(facilityRecord['Closed_Date__c'], "yyyy-MM-dd'T'HH:mm:ss.SSSZ"), "P"+ facilityRecord['Term_Months__c'] +"M"))
                          ,

                          // pending
                          term : {
                              num : 1,
                              units : "months"
                          },
                          rateCode : "01",
                          rate : facilityRecord['Initial_Rate__c'],
                          appRate : if (std.objectHas(facilityRecord, 'APR__c')) then facilityRecord['APR__c'] else "",
                          officerCode : "TG",
                          officerCode2 : "",
                          callReportCodeLoan : "71",
                          payment : {
                              regularPayment : facilityRecord['Estimated_Loan_Payment__c'],
                              paymentFrequency: if(contains("Month", facilityRecord['Payment_Frequency__c'])) then {

                                  num : facilityRecord['Payment_Frequency_Value__c'],
                                  units : "months"

                              } else null,
                          },
                          currentBal : facilityRecord['Total_Pipeline_Amount__c'],
                          originalBal : facilityRecord['Total_Pipeline_Amount__c'],
                          contractBal : facilityRecord['Total_Pipeline_Amount__c'],
                          amtAdvanced : facilityRecord['Total_Pipeline_Amount__c'],
                          interestMethod : "notSpecified",
                          interestRateReviewDate : ds.datetime.now().format("yyyy-MM-dd"),
                          intrestRateChangeDate : ds.datetime.now().format("yyyy-MM-dd"),
                          rateType : facilityRecord['Rate_Type__c'],
                          
                      rateAdjustment : if(std.objectHas(facilityRecord, 'Interest_Methodology__c')) then facilityRecord['Interest_Methodology__c'] else null ,
                          naics : partyRecord['NAICS_Code__c'],
                          acctDescription : record['Description'],
                          hasTeaserRate : "no",
                          initialRate : facilityRecord['Initial_Rate__c'],
                          purposeCode : "119",  
                      },
                      variable : {
                  // check
                          rateChangeFrequency : {
                              num : facilityRecord['Rate_Adjustment_Frequency__c'],
                              units : "months"
                          },
                          rateIncreaseCapYear : "0d",
                          rateIncreaseCapPeriod: "0d",
                          rateDecreaseCapPeriod : "0d",
                          rateDecreaseCapLife : "0d",
                          
                          originalIndex : if(std.objectHas(facilityRecord,'Rate_Index__c')) then std.substr(facilityRecord['Rate_Index__c'], 0, 2) else null,
                          rateDecreaseCapYear : "0d",
                      },
                      loanInsurances : std.map(function(insuranceRecord) {
                          type : insuranceRecord['Policy_Type__c'],
                          originalAmt : insuranceRecord['Policy_Amount__c'],
                          originalNumOfMonths : ds.datetime.now().month - (ds.datetime.parse(insuranceRecord['Expiration_Date__c'], "yyyy-MM-dd").month)
                      }, record['Insurances__r'].records),
                  collaterals : std.map(function(collatralRecord) {
                          "code" : "01",
                          "description1" : collatralRecord['Description__c'],
                          "isCrossColateralized" : collatralRecord['iCore_Collateral_Id__c'],
                          "appraisalValueDate" : collatralRecord['Valuation_Date__c'],
                          value : collatralRecord['Market_Value__c'],
                          sourceValue : collatralRecord['Valuation_Source__c'],
                          propertyStreetAddr : collatralRecord['Address_1__c']+ if(std.objectHas(collatralRecord, "Address_2__c") && collatralRecord['Address_2__c'] != null) then collatralRecord['Address_2__c'] else "",
                          propertyCity : collatralRecord['City__c'],
                          propertyState : collatralRecord['State__c'],
                          propertyZip: collatralRecord['Zipcode__c'],
                          propertyZip4: collatralRecord['Four_Digit_Zip_Code__c'],
                          propertyCountry : "USA",
                          isPropertyInForeignCountry : "No"

                      },  record['Collaterals__r'].records) ,
                      loanFees :  std.map(function(sourceUsesRecord){
                          type : "15",
                          totalAmt : sourceUsesRecord['Amount__c']
                      }, record['Sources_Uses__r'].records) 
                  }
- routeConfiguration: {}
